package main

import (
	"bufio"
	"encoding/base64"
	"log"
	"net/smtp"
	"os"
	"strings"
)

func SendRecoveryEmail(email, username, verificationCode string) error {
	to := []string{email}

	resetPasswordLink := settings.DomainName + `/recover-account/` + username + `/` + verificationCode

	decodedHTML, err := base64.StdEncoding.DecodeString("PGh0bWw+CiAgICA8aGVhZD4KICAgICAgICA8c3R5bGU+CiAgICAgICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVBvcHBpbnM6d2dodEA1MDA7NjAwOzcwMCZkaXNwbGF5PXN3YXAnKTsKICAgIAogICAgICAgICAgICAqewogICAgICAgICAgICAgICAgcGFkZGluZzogMHB4OwogICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7CiAgICAgICAgICAgICAgICBmb250LWZhbWlseTogcG9wcGlucywgc2Fucy1zZXJpZjsKICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7CiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvb3RlciB7CiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgICAgIGJvdHRvbTogMDsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgIzZDNjNGRiwgI2NjY2NjYyk7CiAgICAgICAgICAgICAgICBwYWRkaW5nOiAyMHB4IDAgMzBweDsKICAgICAgICAgICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDEyNXB4OwogICAgICAgICAgICAgICAgZm9udC1zaXplOiAxM3B4OwogICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDFweDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgI3Jvdy1mb290ZXIgewogICAgICAgICAgICAgICAgd2lkdGg6IDg1JTsKICAgICAgICAgICAgICAgIG1hcmdpbjogYXV0bzsKICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7CiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDsKICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgI2NvbC1mb290ZXIgewogICAgICAgICAgICAgICAgZmxleC1iYXNpczogMjUlOwogICAgICAgICAgICAgICAgcGFkZGluZzogMTBweDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgI2NvbC1mb290ZXIgcCB7CiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS44ZW07CiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNTAwOwogICAgICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICNyb3ctZm9vdGVyIHAgewogICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuOGVtOwogICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDsKICAgICAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmOwogICAgICAgICAgICB9CgogICAgICAgICAgICAjY29sLWZvb3RlciBoMyB7CiAgICAgICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDUwcHg7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7CiAgICAgICAgICAgIH0KCgogICAgICAgICAgICAjY29sLWZvb3RlciB1bCBsaSB7CiAgICAgICAgICAgICAgICBsaXN0LXN0eWxlOiBub25lOwogICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTJweDsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CgogICAgICAgICAgICAjY29sLWZvb3RlciB1bCBsaSBhewogICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogICAgICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS44ZW07CiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNTAwOwogICAgICAgICAgICB9CgoKICAgICAgICAgICAgaHIgewogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC51bmRlcmxpbmUgewogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgICAgICBoZWlnaHQ6IDVweDsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICM3Njc2NzY7CiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgICAgICAgICB0b3A6IDI1cHg7CiAgICAgICAgICAgICAgICBsZWZ0OiAwOwogICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLnVuZGVybGluZSBzcGFuIHsKICAgICAgICAgICAgICAgIHdpZHRoOiAxNXB4OwogICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogI2ZmZjsKICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgICAgIHRvcDogMDsKICAgICAgICAgICAgICAgIGxlZnQ6IDEwcHg7CiAgICAgICAgICAgICAgICBhbmltYXRpb246IG1vdmluZyAycyBsaW5lYXIgaW5maW5pdGU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEBrZXlmcmFtZXMgbW92aW5nIHsKICAgICAgICAgICAgICAgIDAlIHsKICAgICAgICAgICAgICAgICAgICBsZWZ0OiAtMjBweDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIDEwMCUgewogICAgICAgICAgICAgICAgICAgIGxlZnQ6IDEwMCU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgPC9zdHlsZT4KICAgIDwvaGVhZD4KICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjMjMyNDJhOyI+CiAgICAgICAgPG1haW4+CiAgICAgICAgICAgIDwhLS0gaGVhZGluZyBwYXJ0IC0tPgogICAgICAgICAgICA8aGVhZGVyIGlkPSJoZWFkZXJfdGV4dCIgIHN0eWxlPSJkaXNwbGF5OiBibG9jazsiPgogICAgICAgICAgICAgICAgPGRpdiBpZD0ibG9nbyI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBhbHQ9IkxPR08gSEVSRSIgc3JjPSJodHRwczovL2F1dGhzcGlyZS5jb20vaW1hZ2VzL2xvZ28ucG5nIiBzdHlsZT0id2lkdGg6IDE1MHB4OyBtYXJnaW4tdG9wOiAxMDBweDsiPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8aDEgc3R5bGU9ImNvbG9yOiAjRkZGOyBkaXNwbGF5OiBjb250ZW50czsiPlJlc2V0IHlvdXIgcGFzc3dvcmQgZm9yIDwvaDE+PGgxIHN0eWxlPSJjb2xvcjogIzU2NEZDQzsgZGlzcGxheTogY29udGVudHM7Ij5BdXRoPC9oMT48aDEgc3R5bGU9ImNvbG9yOiAjRkZGOyBkaXNwbGF5OiBjb250ZW50czsiPlNwaXJlPC9oMT4gICAKICAgICAgICAgICAgPC9oZWFkZXI+CiAgICAKICAgICAgICAgICAgPCEtLXVzZXIgaW5wdXQgIC0tPgogICAgICAgICAgICA8YnI+PGJyPgogICAgICAgICAgICA8YSBzdHlsZT0iY29sb3I6ICNGRkY7IiBocmVmPSJ7e1JFU0VUVVJMfX0iPkNsaWNrIGhlcmUgdG8gcmVzZXQgeW91ciBwYXNzd29yZDwvYT4KICAgICAgICA8L21haW4+CiAgICA8L2JvZHk+CjwvaHRtbD4=")
	if err != nil {
		log.Fatal(err)
	}

	subject := settings.ProjectName + " Account Recovery"

	address := settings.SMTPHost + ":" + settings.SMTPPort

	auth := smtp.PlainAuth("", settings.FromEmail, settings.SMTPPass, settings.SMTPHost)
	msg := []byte(
		"From: " + settings.ProjectName + ": <" + settings.FromEmail + ">\r\n" +
			"To: " + email + "\r\n" +
			"Subject: " + subject + "\r\n" +
			"MIME: MIME-Version: 1.0\r\n" +
			"Content-Type: text/html; charset=\"UTF-8\";\r\n" +
			"\r\n" + strings.Replace(string(decodedHTML), "{{RESETURL}}", resetPasswordLink, -1))
	_ = smtp.SendMail(address, auth, settings.FromEmail, to, msg)

	return nil
}

func SendEmail(username, email, emailString string) error {

	to := []string{email}

	verifyEmailLink := settings.DomainName + `/verify/` + username + `/` + emailString

	decodedHTML, err := base64.StdEncoding.DecodeString("PGh0bWw+CiAgICA8aGVhZD4KICAgICAgICA8c3R5bGU+CiAgICAgICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVBvcHBpbnM6d2dodEA1MDA7NjAwOzcwMCZkaXNwbGF5PXN3YXAnKTsKICAgIAogICAgICAgICAgICAqewogICAgICAgICAgICAgICAgcGFkZGluZzogMHB4OwogICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7CiAgICAgICAgICAgICAgICBmb250LWZhbWlseTogcG9wcGlucywgc2Fucy1zZXJpZjsKICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7CiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvb3RlciB7CiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgICAgIGJvdHRvbTogMDsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgIzZDNjNGRiwgI2NjY2NjYyk7CiAgICAgICAgICAgICAgICBwYWRkaW5nOiAyMHB4IDAgMzBweDsKICAgICAgICAgICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDEyNXB4OwogICAgICAgICAgICAgICAgZm9udC1zaXplOiAxM3B4OwogICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDFweDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgI3Jvdy1mb290ZXIgewogICAgICAgICAgICAgICAgd2lkdGg6IDg1JTsKICAgICAgICAgICAgICAgIG1hcmdpbjogYXV0bzsKICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7CiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDsKICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgI2NvbC1mb290ZXIgewogICAgICAgICAgICAgICAgZmxleC1iYXNpczogMjUlOwogICAgICAgICAgICAgICAgcGFkZGluZzogMTBweDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgI2NvbC1mb290ZXIgcCB7CiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS44ZW07CiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNTAwOwogICAgICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICNyb3ctZm9vdGVyIHAgewogICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuOGVtOwogICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDsKICAgICAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmOwogICAgICAgICAgICB9CgogICAgICAgICAgICAjY29sLWZvb3RlciBoMyB7CiAgICAgICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDUwcHg7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7CiAgICAgICAgICAgIH0KCgogICAgICAgICAgICAjY29sLWZvb3RlciB1bCBsaSB7CiAgICAgICAgICAgICAgICBsaXN0LXN0eWxlOiBub25lOwogICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTJweDsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CgogICAgICAgICAgICAjY29sLWZvb3RlciB1bCBsaSBhewogICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogICAgICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS44ZW07CiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNTAwOwogICAgICAgICAgICB9CgoKICAgICAgICAgICAgaHIgewogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC51bmRlcmxpbmUgewogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgICAgICBoZWlnaHQ6IDVweDsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICM3Njc2NzY7CiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgICAgICAgICB0b3A6IDI1cHg7CiAgICAgICAgICAgICAgICBsZWZ0OiAwOwogICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLnVuZGVybGluZSBzcGFuIHsKICAgICAgICAgICAgICAgIHdpZHRoOiAxNXB4OwogICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogI2ZmZjsKICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDsKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgICAgIHRvcDogMDsKICAgICAgICAgICAgICAgIGxlZnQ6IDEwcHg7CiAgICAgICAgICAgICAgICBhbmltYXRpb246IG1vdmluZyAycyBsaW5lYXIgaW5maW5pdGU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEBrZXlmcmFtZXMgbW92aW5nIHsKICAgICAgICAgICAgICAgIDAlIHsKICAgICAgICAgICAgICAgICAgICBsZWZ0OiAtMjBweDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIDEwMCUgewogICAgICAgICAgICAgICAgICAgIGxlZnQ6IDEwMCU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgPC9zdHlsZT4KICAgIDwvaGVhZD4KICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjMjMyNDJhOyI+CiAgICAgICAgPG1haW4+CiAgICAgICAgICAgIDwhLS0gaGVhZGluZyBwYXJ0IC0tPgogICAgICAgICAgICA8aGVhZGVyIGlkPSJoZWFkZXJfdGV4dCIgIHN0eWxlPSJkaXNwbGF5OiBibG9jazsiPgogICAgICAgICAgICAgICAgPGRpdiBpZD0ibG9nbyI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBhbHQ9IkxPR08gSEVSRSIgc3JjPSJodHRwczovL2F1dGhzcGlyZS5jb20vaW1hZ2VzL2xvZ28ucG5nIiBzdHlsZT0id2lkdGg6IDE1MHB4OyBtYXJnaW4tdG9wOiAxMDBweDsiPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8aDEgc3R5bGU9ImNvbG9yOiAjRkZGOyBkaXNwbGF5OiBjb250ZW50czsiPldlbGNvbWUgdG8gPC9oMT48aDEgc3R5bGU9ImNvbG9yOiAjNTY0RkNDOyBkaXNwbGF5OiBjb250ZW50czsiPkF1dGg8L2gxPjxoMSBzdHlsZT0iY29sb3I6ICNGRkY7IGRpc3BsYXk6IGNvbnRlbnRzOyI+U3BpcmUhPC9oMT4gICAKICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJjb2xvcjogI0ZGRjsgbWFyZ2luLXRvcDogMjBweDsgbWFyZ2luLWJvdHRvbTogMTAwcHg7Ij5XZSBhcmUgaGFwcHkgeW91IGRlY2lkZWQgdG8gam9pbiB1cy48L3A+ICAgICAgICAgICAgCiAgICAgICAgICAgIDwvaGVhZGVyPgogICAgCiAgICAgICAgICAgIDwhLS11c2VyIGlucHV0ICAtLT4KCiAgICAgICAgICAgIDxhIHN0eWxlPSJjb2xvcjogI0ZGRjsiIGhyZWY9Int7VkVSSUZJQ0FUSU9OVVJMfX0iPkNsaWNrIGhlcmUgdG8gdmVyaWZ5IHlvdXIgYWNjb3VudDwvYT4KICAgICAgICA8L21haW4+CiAgICA8L2JvZHk+CjwvaHRtbD4=")
	if err != nil {
		log.Fatal(err)
	}

	subject := "Welcome to " + settings.ProjectName + ", please verify your email"

	address := settings.SMTPHost + ":" + settings.SMTPPort

	auth := smtp.PlainAuth("", settings.FromEmail, settings.SMTPPass, settings.SMTPHost)
	msg := []byte(
		"From: " + settings.ProjectName + ": <" + settings.FromEmail + ">\r\n" +
			"To: " + email + "\r\n" +
			"Subject: " + subject + "\r\n" +
			"MIME: MIME-Version: 1.0\r\n" +
			"Content-Type: text/html; charset=\"UTF-8\";\r\n" +
			"\r\n" + strings.Replace(string(decodedHTML), "{{VERIFICATIONURL}}", verifyEmailLink, -1))
	_ = smtp.SendMail(address, auth, settings.FromEmail, to, msg)

	return nil
}

func GetDisposableEmailList() (dispEmails []string) {
	file, err := os.Open(settings.EmailBlockList)
	if err != nil {
		log.Panic(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		dispEmails = append(dispEmails, scanner.Text())
	}
	return dispEmails
}
